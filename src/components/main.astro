---
import { getCollection } from 'astro:content';
import {
	filterProjects,
	filterAuthorsExcludingUsername,
} from '../lib/filters.ts';

import HeroSection from './hero-section.astro';
import AskSection from './ask-section.astro';

import ProjectGrid from './project-grid.astro';

const authorsRaw = await getCollection('authors');
const authors = filterAuthorsExcludingUsername(authorsRaw, [
	'hbk-bs-bot',
	'ff6347',
	'narstasya',
	'karlotte1312',
]);
const projectsRaw = await getCollection('projects');
const briefings = await getCollection('briefings');

const projectsOrdered = filterProjects({
	projects: projectsRaw,
	usersToFilter: ['hbk-bs-bot', 'ff6347', 'narstasya', 'karlotte1312'],
	titlesToFilter: [
		// 'PROJECT TITLE HERE'
	],
	projectOrder: [
		'a-generative-graphic-novel-grades-1750141106_clean',
		'text-the-universal-interface-grades-1748958867_clean',
		'nature-of-code-grades-1748958836_clean',
		'teachable-machine-grades-1748958849_clean',
		'blinkenlichten-grades-1748958812_clean',
		'the-archives-grades-1748958759_clean',
	],
});

const authorMap = Object.fromEntries(authors.map((a) => [a.id, a]));
const briefingMap = Object.fromEntries(briefings.map((b) => [b.data.id, b]));
---

<main>
	<HeroSection authors={authors} />
	<AskSection
		authors={authors}
		projects={projectsOrdered}
		briefings={briefings}
		stickyAskSectionId="sticky-ask-section"
	/>
	<section id="projects">
		<h2 class="m-auto max-w-screen-sm p-4">Projects</h2>

		{/*add some cards to jump to a specific project */}
		<div
			id="project-list-cards"
			class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 m-auto max-w-screen-lg p-4"
		>
			{
				projectsOrdered.map((project) => {
					const briefing = briefingMap[project.data.id];
					return (
						<a
							href={`#${briefing?.data.id}`}
							class="project-list-card bg-white  shadow-md p-6 flex flex-col justify-between h-full hover:scale-105 transition-transform border-dashed border-black border-1 sparkle-target"
						>
							<div class="decoration-0">
								{briefing?.data.title || project.data.id}
							</div>
							<div>
								<p class="text-sm text-left decoration-0 text-gray-600 dark:text-gray-300">
									{briefing?.data.description}
								</p>
							</div>
						</a>
					);
				})
			}
		</div>

		<div id="project-list">
			{
				projectsOrdered.map((project) => {
					if (!project) return null;
					const briefing = briefingMap[project.data.id];
					return (
						<>
							<div class="project-item">
								<div class="project-item-content m-auto max-w-screen-sm p-4">
									{briefing && briefing.data.title && (
										<h3 id={project.data.id}>{briefing.data.title}</h3>
									)}
									{briefing && briefing.data.description && (
										<p class="italic pl-4">{briefing.data.description}</p>
									)}
									{briefing && briefing.rendered && (
										<div set:html={briefing.rendered.html} />
									)}
									<ProjectGrid rows={project.data.rows} authorMap={authorMap} />
								</div>
							</div>
						</>
					);
				})
			}
		</div>
	</section>
</main>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const askSection = document.getElementById('sticky-ask-section');
		const links = document.querySelectorAll('.project-list-card');

		links.forEach((link) => {
			link.addEventListener('click', function (e) {
				const href = this.getAttribute('href');
				if (href && href.startsWith('#')) {
					e.preventDefault();
					const target = document.getElementById(href.slice(1));
					if (target && askSection) {
						const askHeight = askSection.offsetHeight;
						const targetTop =
							target.getBoundingClientRect().top + window.scrollY;
						window.scrollTo({
							top: targetTop - askHeight,
							behavior: 'smooth',
						});
					}
				}
			});
		});
	});
</script>
