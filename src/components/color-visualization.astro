---
const { colors: projectColors } = Astro.props;
let projectId = projectColors?.id ?? 'default';
if (!projectId) throw new Error('no id found');
---

<color-visualization
	id={`color-visualization-${projectId}`}
	data-id={projectId}
	data-colors={JSON.stringify(projectColors)}></color-visualization>

<script>
	import { SVG } from '@svgdotjs/svg.js';
	class ColorVisualization extends HTMLElement {
		connectedCallback() {
			const colors = JSON.parse(this.dataset.colors ?? '{}');
			console.log(colors);
			const colorArr = colors.colors || []; // adjust if your array is named differently
			const width = 120;
			const height = 120;
			const draw = SVG().addTo(this).size(width, height);
			/* Keyword values */
			// mix-blend-mode: normal;
			// mix-blend-mode: multiply;
			// mix-blend-mode: screen;
			// mix-blend-mode: overlay;
			// mix-blend-mode: darken;
			// mix-blend-mode: lighten;
			// mix-blend-mode: color-dodge;
			// mix-blend-mode: color-burn;
			// mix-blend-mode: hard-light;
			// mix-blend-mode: soft-light;
			// mix-blend-mode: difference;
			// mix-blend-mode: exclusion;
			// mix-blend-mode: hue;
			// mix-blend-mode: saturation;
			// mix-blend-mode: color;
			// mix-blend-mode: luminosity;
			// mix-blend-mode: plus-darker;
			// mix-blend-mode: plus-lighter;
			draw.node.style.mixBlendMode = 'multiply';

			const r = 200; // radius

			const clamp = (min: number, max: number, x: number) =>
				Math.max(min, Math.min(x, max));
			colorArr.forEach((c: any, i: number) => {
				const randomx = clamp(15, width - 15, Math.random() * width * 0.5);
				const randomy = clamp(15, height - 15, Math.random() * height);
				const randomr = clamp(50, r, Math.random() * r * 2);

				for (let j = 0; j < 50; j++) {
					draw
						.circle(randomr)
						.cx(randomx + Math.random() * 10 - 5)
						.cy(randomy + Math.random() * 10 - 5)
						.fill(c.hex || c.rgb || c) // support hex, rgb, or direct string
						.opacity(0.005);
				}
			});
		}
	}

	customElements.define('color-visualization', ColorVisualization);
</script>
