---
const { colors: projectColors } = Astro.props;
let projectId = projectColors?.id ?? 'default';
if (!projectId) throw new Error('no id found');
---

<color-visualization
	id={`color-visualization-${projectId}`}
	data-id={projectId}
	class="border-b border-dashed border-black"
	data-colors={JSON.stringify(projectColors)}></color-visualization>

<script>
	        import { SVG } from '@svgdotjs/svg.js';
        class ColorVisualization extends HTMLElement {
                draw: any;
                resizeObserver: ResizeObserver | undefined;

                connectedCallback() {
                        const colors = JSON.parse(this.dataset.colors ?? '{}');
                        const colorArr = colors.colors || [];

                        const ratioCalc = (width: number, ratio: '16/9' | '4/3') => {
                                if (ratio === '16/9') {
                                        return width * 0.5625;
                                }
                                if (ratio === '4/3') {
                                        return width * 0.75;
                                }
                        };

                        const render = () => {
                                const baseWidth = (this.parentElement?.clientWidth || 180) * 1.1;
                                const width = baseWidth;
                                const height = ratioCalc(width, '16/9');

                                if (!this.draw) {
                                        this.draw = SVG().addTo(this);
                                        this.draw.node.style.mixBlendMode = 'multiply';
                                } else {
                                        this.draw.clear();
                                }

                                this.draw.size(width, height);

                                const r = 200;
                                const clamp = (min: number, max: number, x: number) => Math.max(min, Math.min(x, max));
                                colorArr.forEach((c: any) => {
                                        const randomx = clamp(15, width - 15, Math.random() * width * 0.5);
                                        const randomy = clamp(15, height - 15, Math.random() * height);
                                        const randomr = clamp(50, r, Math.random() * r * 2);

                                        for (let j = 0; j < 50; j++) {
                                                this.draw
                                                        .circle(randomr)
                                                        .cx(randomx + Math.random() * 10 - 5)
                                                        .cy(randomy + Math.random() * 10 - 5)
                                                        .fill(c.hex || c.rgb || c)
                                                        .opacity(0.005);
                                        }
                                });
                        };

                        render();
                        this.resizeObserver = new ResizeObserver(render);
                        this.resizeObserver.observe(this.parentElement || this);
                }

                disconnectedCallback() {
                        this.resizeObserver?.disconnect();
                }
        }

        customElements.define('color-visualization', ColorVisualization);

</script>
