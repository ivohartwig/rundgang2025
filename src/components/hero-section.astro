---
import type { CollectionEntry } from 'astro:content';
export interface Props {
	authors: CollectionEntry<'authors'>[];
}
const { authors } = Astro.props;
---

<section id="hero" class="bg-black text-white">
	<div class="hero-content m-auto max-w-screen-sm p-4">
		<h1 class="sparkle-target heading-sticky">Rundgang 2025</h1>
		<p>Projects from the seminar</p>
		<h2>Fundamentals of Digital Communication</h2>
		<p>in winter semester 2024/2025 and summer semester 2025 by</p>
		<div class="authors flex flex-row flex-wrap gap-4">
			{
				authors.map((author) => (
					<figure class="flex flex-col gap-2 text-left author w-1/5 flex-shrink-0 flex-grow-0 sm:w-32">
						<a
							href={`https://github.com/${author.data.github_username}`}
							target="_blank"
							rel="noopener noreferrer"
							class="avatar-link"
						>
							{author.data.avatar ? (
								<img
									src={author.data.avatar}
									alt={author.data.github_username}
									class="object-cover w-16 h-16 sm:w-20 sm:h-20 lg:w-24 lg:h-24 hover:scale-105 transition-transform border-1 border-dashed border-white sparkle-target avatar-image"
								/>
							) : (
								<div class="w-16 h-16 sm:w-20 sm:h-20 lg:w-24 lg:h-24 bg-gray-600 border-1 border-dashed border-white rounded flex items-center justify-center text-white font-bold text-lg sparkle-target hover:scale-105 transition-transform">
									{author.data.github_username.charAt(0).toUpperCase()}
								</div>
							)}
						</a>
						<figcaption class="hidden sm:block">
							<span class="mt-2 text-center text-xs break-all">
								@{author.data.github_username}
							</span>
						</figcaption>
					</figure>
				))
			}
		</div>
	</div>
</section>

<script>
	// Shuffle and re-append .author elements in the DOM
	window.addEventListener('DOMContentLoaded', () => {
		const parent = document.querySelector('.authors');
		if (!parent) return;
		const authors = Array.from(parent.querySelectorAll('.author'));
		if (authors.length < 2) return;

		// Shuffle authors
		const shuffled = authors.sort(() => Math.random() - 0.5);

		// Remove all children (including text nodes)
		while (parent.firstChild) parent.removeChild(parent.firstChild);

		// Rebuild with correct separators
		shuffled.forEach((author) => {
			parent.appendChild(author);
			// if (i < shuffled.length - 2) {
			// 	const span = document.createElement('span');
			// 	span.textContent = ', ';
			// 	parent.appendChild(span);
			// } else if (i === shuffled.length - 2) {
			// 	const span = document.createElement('span');
			// 	span.textContent = ' and ';
			// 	parent.appendChild(span);
			// }
		});
		const avatarImages = document.querySelectorAll('.avatar-image');
		avatarImages.forEach((image) => {
			if (image instanceof HTMLImageElement) {
				image.style.transform = `rotate(${Math.random() * 3 - 1.5}deg)`;
			}
		});
	});
</script>

<style>
	.avatar-link {
		text-decoration: none !important;
		background-image: none !important;
		background-size: 0 !important;
		transition: transform 0.2s ease-in-out;
		transform-origin: center;
	}

	.avatar-link .avatar-image {
		transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);
		transform-origin: center;
	}

	.avatar-link:hover .avatar-image {
		transform: rotate(0deg) !important;
	}
</style>
