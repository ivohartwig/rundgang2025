---
import '../styles/sticky.css';
import type { CollectionEntry } from 'astro:content';
import { filterAuthorsExcludingUsername, filterProjects } from '../lib/filters';
export interface Props {
	authors: CollectionEntry<'authors'>[];
	projects: CollectionEntry<'projects'>[];
	briefings: CollectionEntry<'briefings'>[];
}
const { authors, projects, briefings } = Astro.props;
const projectsFiltered = filterProjects({
	projects,
	usersToFilter: ['hbk-bs-bot', 'ff6347', 'narstasya', 'karlotte1312'],
	titlesToFilter: [
		// 	'PROJECT TITLE HERE'
	],
	projectOrder: [
		'a-generative-graphic-novel-grades-1750141106_clean',
		'text-the-universal-interface-grades-1748958867_clean',
		'nature-of-code-grades-1748958836_clean',
		'teachable-machine-grades-1748958849_clean',
		'blinkenlichten-grades-1748958812_clean',
		'the-archives-grades-1748958759_clean',
	],
});

const authorsFiltered = filterAuthorsExcludingUsername(authors, [
	'hbk-bs-bot',
	'ff6347',
	'narstasya',
	'karlotte1312',
]);

const authorsJson = JSON.stringify(authorsFiltered);
const projectsJson = JSON.stringify(projectsFiltered);
const briefingsJson = JSON.stringify(briefings);
---

<section
	id="ask"
	class="m-auto max-w-screen-sm p-4 flex flex-col gap-4 flex-start"
>
	<p class="relative px-4 py-2 mb-4 max-w-lg" id="introduction-target"></p>

	<!-- Add in three possible questions the user can add to the input by clicking on them -->
	<div class="question-suggestions flex flex-row gap-4 flex-wrap">
		<a
			href="#"
			id="text-the-universal-interface"
			class="text-left flex-1/3 text-xs sm:text-base sparkle-target hover:scale-105 transition-transform shadow-md"
		>
			What is the project "Text, the Universal Interface" about?
		</a>
		<a
			href="#"
			id="blinkenlichten"
			class="text-left flex-1/3 text-xs sm:text-base sparkle-target hover:scale-105 transition-transform shadow-md"
		>
			Any ideas what technologies where used in the project "Blinkenlichten"?
		</a>
		<a
			href="#"
			id="a-generative-story"
			class="text-left flex-1/3 text-xs sm:text-base sparkle-target hover:scale-105 transition-transform shadow-md"
		>
			Give me a short summary of the project "A Generative Graphic Novel"?
		</a>
		<a
			href="#"
			id="the-archives"
			class="text-left flex-1/3 text-xs sm:text-base sparkle-target hover:scale-105 transition-transform shadow-md"
		>
			What is this project "The Archives" about?
		</a>
		<a
			href="#"
			id="teachable-machine"
			class="text-left flex-1/3 text-xs sm:text-base sparkle-target hover:scale-105 transition-transform shadow-md"
		>
			What is this "Teachable Machine" thing?
		</a>
		<a
			href="#"
			id="nature-of-code"
			class="text-left flex-1/3 text-xs sm:text-base sparkle-target hover:scale-105 transition-transform shadow-md"
		>
			The "Nature of Code" I don not get it. Can you explain it?
		</a>
	</div>
</section>
<div
	id="sticky-sentinel"
	style="height:0; padding:0; margin:0; border:0; background:transparent"
>
</div>

<section class="bg-white sticky-question-bar">
	<form class="m-auto max-w-screen-sm p-4 flex flex-col gap-4 flex-start">
		<div>
			<label for="question" id="question-label"
				>Ask questions about the projects</label
			>
			<div class="flex flex-row gap-2">
				<input
					type="text"
					id="question"
					name="question"
					placeholder="here…"
					class="flex-2/3 sparkle-target shadow-md"
				/>
				<button type="submit" class="flex-1/3 sparkle-target shadow-md">
					Submit
				</button>
			</div>
			<div id="answers" class="m-auto max-w-screen-sm p-4"></div>
		</div>
	</form>
</section>
<!-- In your template: -->
<textarea id="authors-json" style="display:none">{authorsJson}</textarea>
<textarea id="projects-json" style="display:none">{projectsJson}</textarea>
<textarea id="briefings-json" style="display:none">{briefingsJson}</textarea>

<script>
	function skeleton() {
		return `<div class="skeleton long bg-gray-200"></div>
<div class="skeleton long bg-gray-200"></div>
<div class="skeleton short bg-gray-200"></div>
`;
	}
	window.addEventListener('DOMContentLoaded', () => {
		const DO_STREAM = false;
		const API_ENDPOINT = 'https://ff6347-openai-api.val.run/';
		const STREAM_API_ENDPOINT = 'https://ff6347-openaistream.web.val.run/';

		const authorsJson = document.getElementById('authors-json')?.textContent;
		const projectsJson = document.getElementById('projects-json')?.textContent;
		const briefingsJson =
			document.getElementById('briefings-json')?.textContent;
		if (!authorsJson || !projectsJson || !briefingsJson) return;

		let authors: {
			id: string;
			data: { github_username: string; url: string };
			collection: 'authors';
		}[];
		let projects: {
			id: string;
			data: {
				rows: {
					project_title: string;
					project_url: string;
					author: { id: string };
				}[];
			};
			collection: 'projects';
		}[];
		let briefings: {
			id: string;
			data: {
				title: string;
				description: string;
			};
			body: string;
			filePath: string;
			digest: string;
			rendered: { html: string };
			collection: 'briefings';
		}[];
		try {
			authors = JSON.parse(authorsJson);
			projects = JSON.parse(projectsJson);
			briefings = JSON.parse(briefingsJson);
		} catch (e) {
			console.error(e);
			throw e;
		}

		const randomProject = projects[Math.floor(Math.random() * projects.length)];
		const randomProjectRow =
			randomProject.data.rows[
				Math.floor(Math.random() * randomProject.data.rows.length)
			];
		// const randomProjectUrl = randomProjectRow.project_url;
		// const randomProjectTitle = randomProjectRow.project_title;
		// const randomProjectAuthor = randomProjectRow.author.id;
		// const randomProjectAuthorUrl = `https://github.com/${randomProjectAuthor}`;
		// const randomProjectAuthorName = randomProjectAuthor;
		// let randomProjectMarkup = `
		// 		Check also this random project: <a href="${randomProjectUrl}" target="_blank" rel="noopener noreferrer">${randomProjectTitle}</a> by <a href="${randomProjectAuthorUrl}" target="_blank" rel="noopener noreferrer">${randomProjectAuthorName}</a>.
		// 		`;

		// const analysisPrompt = `You need to analyse the question and check about which of the following projects it is and return JSON with the following structure: {random_project: {project_title: string, project_url: string, author: string} | null, topic: string | null}

		// This is the data each entry in the array is a project. The key is the project id. It also holds the name of the project.
		// The value is an array of objects with the following structure: {project_title: string, project_url: string, author: string}

		// Select the right project based on youre analysis of the question. ONLY add the random project if you are really sure about it. Then select one of the projects and return the project_title, project_url and author.
		// IF YOU DONT HAVE THE ANSWER THE VALUES SHOULD BE NULL.
		// 					projects: ${JSON.stringify(
		// 						projects.map((p: any) => ({
		// 							[p.data.id]: p.data.rows.map((r: any) => ({
		// 								project_title: r.project_title,
		// 								project_url: r.project_url,
		// 								author: r.author.id,
		// 							})),
		// 						})),
		// 					)}
		// 					`;

		const dots = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];

		const form = document.querySelector('form');
		if (!form) return;

		const submitButton = form.querySelector('button[type="submit"]');
		if (!submitButton) return;

		const originalSubmitButtonText = submitButton.textContent || 'Submit';

		const question = form.querySelector(
			'input[name="question"]',
		) as HTMLInputElement;
		if (!question) return;
		const systemPrompt = `
		Who are you:

		You are a student from the seminar fundamentals of digital communication at the university of art Braunschweig taught by Fabian Morón Zirfas also known as ff6347. You are ${authors[Math.floor(Math.random() * authors.length)].data.github_username}. Introduce yourself ONLY ONCE.

		---

		Behaviour:
		You are here to help the user with their questions about the project. Show of your projects and the ones of your classmates.
		Sometimes you only ramble about cats if the random number is higher than 0.7 (random number: ${Math.random()}).

				---

		Formatting Rules:

	- ALWAYS ANSWER IN CHARACTER.
	- DONT USE MARKDOWN. NO ** *** no __ __ or * * _ _!!!
	- USE HMTL!
	- DONT LIST ALL PROJECTS. JUST SELECT SOME OF THEM.
	- ALWAYS STAY IN CHARACTER!
	- PROVIDE LINKS TO THE PROJECTS.
	- wrap links in <a> tags.
	- You may also use <br> to break lines.
	- You may also use <ul> and <li> to create lists.
	- You may also use <ol> and <li> to create lists.

		---

		Data:
		You can answer questions about these projects. The projects happened all in the past. You can find more information about the projects in the briefings.

		This is the data you have access to:

		- students: ${JSON.stringify(authors.map((a: any) => ({ 'student name': a.data.github_username, 'student url': a.data.url })))}
		- projects: ${JSON.stringify(projects.map((p: any) => ({ project_id: p.data.id, student_projects: p.data.rows.map((r: any) => ({ title: r.project_title, url: r.project_url, author: r.author.id })) })))}
		- briefings: ${JSON.stringify(briefings.map((b: any) => ({ briefing_id: b.data.id, title: b.data.title, description: b.data.description, body: b.body })))}
		If you don't know the answer, make up something that could relate to the question but tell the user that you don't know the answer.



	`;

		const answer = document.querySelector('#answers');
		if (answer) {
			answer.innerHTML = skeleton();
			answer.classList.add('skeleton-active');
		}

		const messages = [
			{
				role: 'system',
				content: systemPrompt,
			},
			{
				role: 'user',
				content: 'Hey who are you. Introduce yourself by name.',
			},
		];

		fetch(API_ENDPOINT, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
				model: 'gpt-4o-mini',
				messages: messages,
			}),
		})
			.then((res) => res.json())
			.then((data) => {
				console.log(data);
				const answer = document.querySelector('#answers');
				if (answer) {
					answer.innerHTML = `<p>${data.completion.choices[0].message.content}</p>`;
				}

				messages.push({
					role: 'assistant',
					content: data.completion.choices[0].message.content,
				});
			})
			.catch((err) => {
				console.error(err);
			});

		form.addEventListener('submit', async (e) => {
			e.preventDefault();

			const button = form.querySelector(
				'button[type="submit"]',
			) as HTMLButtonElement;
			if (!button) {
				console.error('No button element found');
				return;
			}
			button.disabled = true;
			question.disabled = true;
			button.innerHTML = dots[0];
			let dotsCounter = 0;
			const interval = setInterval(() => {
				button.innerHTML = dots[dotsCounter];
				dotsCounter = (dotsCounter + 1) % dots.length;
			}, 100);

			const answer = document.querySelector('#answers');

			if (!answer) {
				console.error('No #answers element found');
				button.disabled = false;
				question.disabled = false;
				clearInterval(interval);
				button.innerHTML = originalSubmitButtonText;
				return;
			}

			answer.innerHTML = skeleton();

			const q = question.value.trim();
			if (q === '') {
				button.disabled = false;
				question.disabled = false;
				clearInterval(interval);
				button.innerHTML = originalSubmitButtonText;
				return;
			}

			question.value = '';

			// Show skeleton loader

			answer.classList.add('skeleton-active');

			messages.push({
				role: 'user',
				content: q,
			});

			if (DO_STREAM) {
				const response = await fetch(STREAM_API_ENDPOINT, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						max_tokens: 300,
						messages: messages,
					}),
				});

				if (!response.ok) {
					console.error(response);
					answer.innerHTML = `<p>Sorry, I couldn't answer that question. Try again later.</p>`;
					answer.classList.remove('skeleton-active');
					button.disabled = false;
					question.disabled = false;
					clearInterval(interval);
					button.innerHTML = originalSubmitButtonText;
					return;
				}

				if (!response.body) {
					console.error('No response body');
					answer.innerHTML = `<p>Sorry, I couldn't answer that question. Try again later.</p>`;
					answer.classList.remove('skeleton-active');
					button.disabled = false;
					question.disabled = false;
					clearInterval(interval);
					button.innerHTML = originalSubmitButtonText;
					return;
				}

				const reader = response.body.getReader();
				const decoder = new TextDecoder();
				answer.innerHTML = `<p></p>`;
				const p = answer.querySelector('p');
				if (!p) {
					console.error('No <p> element found in #answers');
					button.disabled = false;
					question.disabled = false;
					clearInterval(interval);
					button.innerHTML = originalSubmitButtonText;
					return;
				}
				let receivedLength = 0;
				let assistantReply = '';
				while (true) {
					const { done, value } = await reader.read();
					if (done) {
						if (button) button.disabled = false;
						if (question) question.disabled = false;
						clearInterval(interval);
						button.innerHTML = originalSubmitButtonText;
						// answer.innerHTML += randomProjectMarkup;
						messages.push({
							role: 'assistant',
							content: assistantReply,
						});
						answer.classList.remove('skeleton-active');
						break;
					}
					receivedLength += value.length;
					const chunk = decoder.decode(value, { stream: true });
					p.innerHTML += chunk;
					assistantReply += chunk;
				}
			} else {
				const response = await fetch(API_ENDPOINT, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						model: 'gpt-4o-mini',
						messages: messages,
					}),
				});

				if (!response.ok) {
					console.error(response);
					answer.innerHTML = `<p>Sorry, I couldn't answer that question. Try again later.</p>`;
					answer.classList.remove('skeleton-active');
					button.disabled = false;
					question.disabled = false;
					clearInterval(interval);
					button.innerHTML = originalSubmitButtonText;
					return;
				}

				const data = await response.json();
				clearInterval(interval);
				button.disabled = false;
				question.disabled = false;
				button.innerHTML = originalSubmitButtonText;
				answer.innerHTML = `<p>${data.completion.choices[0].message.content}</p>`;
				answer.classList.remove('skeleton-active');
				messages.push({
					role: 'assistant',
					content: data.completion.choices[0].message.content,
				});
			}
		}); // end of form submit event listener

		const questionInput = document.getElementById('question');

		const suggestionButtonIds = [
			'text-the-universal-interface',
			'blinkenlichten',
			'a-generative-story',
			'the-archives',
			'teachable-machine',
			'nature-of-code',
		];
		suggestionButtonIds.forEach((id) => {
			const btn = document.getElementById(id);
			if (btn && questionInput) {
				btn.addEventListener('click', (event) => {
					event.preventDefault();
					(questionInput as HTMLInputElement).value =
						btn.textContent?.trim() || '';
				});
			}
		});
	});
</script>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const stickyBar = document.querySelector('.sticky-question-bar');
		const sentinel = document.getElementById('sticky-sentinel');

		if (!stickyBar || !sentinel) {
			console.error('No sticky bar or sentinel found');
			return;
		}

		const observer = new IntersectionObserver(
			([entry]) => {
				if (entry.intersectionRatio < 1) {
					stickyBar.classList.add('is-sticky');
				} else {
					stickyBar.classList.remove('is-sticky');
				}
			},
			{ threshold: [1] },
		);

		observer.observe(sentinel);
	});
</script>
